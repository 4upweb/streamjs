{"version":3,"sources":["test-introduction.es6"],"names":[],"mappings":"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","file":"test-introduction-compiled.js","sourcesContent":["QUnit.test(\"sample 1\", function (assert) {\n    var myList = [\"a1\", \"a2\", \"b1\", \"c2\", \"c1\"];\n\n    var result = Stream(myList)\n        .filter(s => s.indexOf(\"c\") === 0)\n        .map(s => s.toUpperCase())\n        .sorted()\n        .toArray();\n\n    assert.equal(result.length, 2);\n    assert.equal(result[0], \"C1\");\n    assert.equal(result[1], \"C2\");\n});\n\nQUnit.test(\"sample 2\", function (assert) {\n    Stream([\"a1\", \"a2\", \"a3\"])\n        .findFirst()\n        .ifPresent(first => assert.equal(first, \"a1\"));\n\n    Stream.of(\"a1\", \"a2\", \"a3\")\n        .findFirst()\n        .ifPresent(first => assert.equal(first, \"a1\"));\n\n    var result = Stream\n        .range(1, 4)\n        .toArray();\n\n    assert.equal(result.length, 3);\n    assert.equal(result[0], 1);\n    assert.equal(result[1], 2);\n    assert.equal(result[2], 3);\n});\n\nQUnit.test(\"sample 3\", function (assert) {\n    Stream.of(1, 2, 3)\n        .map(n => 2 * n + 1)\n        .average()\n        .ifPresent(avg => assert.equal(avg, 5.0));\n});\n\nQUnit.test(\"sample 4\", function (assert) {\n    Stream.of(\"a1\", \"a2\", \"a3\")\n        .map(s => s.slice(1))\n        .map(s => parseInt(s, 10))\n        .max()\n        .ifPresent(max => assert.equal(max, 3));\n});\n\nQUnit.test(\"sample 5\", function (assert) {\n    Stream.of(\"a1\", \"b2\", \"c3\")\n        .filter(s => {\n            console.log(\"filtering: %s\", s);\n            assert.ok(false);\n            return true;\n        });\n\n    assert.ok(true);\n});\n\nQUnit.test(\"sample 6\", function (assert) {\n    var ops = [];\n\n    Stream.of(\"a1\", \"b2\", \"c3\")\n        .filter(s => {\n            ops.push(\"filter: \" + s);\n            return true;\n        })\n        .forEach(s => ops.push(\"forEach: \" + s));\n\n    assert.equal(ops.length, 6);\n    assert.equal(ops[0], \"filter: a1\");\n    assert.equal(ops[1], \"forEach: a1\");\n    assert.equal(ops[2], \"filter: b2\");\n    assert.equal(ops[3], \"forEach: b2\");\n    assert.equal(ops[4], \"filter: c3\");\n    assert.equal(ops[5], \"forEach: c3\");\n});"]}